-- Find the titles of all movies directed by Steven Spielberg

SELECT title 
FROM movie m 
WHERE m.director = 'Steven Spielberg';

--Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order.
SELECT DISTINCT m.year
FROM movie m, rating r
WHERE m.mID = r.mID 
AND r.stars in (4 , 5)
ORDER BY m.year;


-- Find the titles of all movies that have no ratings.
SELECT m. title
FROM movie m WHERE m.mID NOT IN (SELECT mID FROM rating) ;

--Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date.
SELECT DISTINCT rev.name
FROM rating rat, reviewer rev
WHERE rat.rID = rev.rID
AND rat.ratingDate is null

--Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars.
SELECT rev.name, mov.title,rat.stars,rat.ratingDate
FROM rating rat,reviewer rev, movie mov
WHERE rat.rID = rev.rID
AND rat.mID = mov.mID
ORDER BY rev.name, mov.title,rat.stars;

-- For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie.
SELECT  rev.name, mov.title
FROM movie mov ,reviewer rev,
(SELECT r1.rID , r1.mID
FROM  rating r1
WHERE exists (SELECT * 
                 FROM rating r2
                  WHERE r2.rID = r1.rID
                       AND r2.mID  = r1.mId
                       AND r2.ratingDate > r1.ratingDate
                        AND r2.stars > r1.stars)) Result
	WHERE result.mId = mov.mId AND result.rID = rev.rID

-- For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title.

SELECT m.title AS mtitle , mStars
FROM movie m,
(SELECT rat.mID , max(rat.stars) as mStars
FROM rating rat
GROUP BY  rat.mID) result
WHERE m.mID = result.mID
ORDER BY mtitle;


--For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title.

SELECT m. title, Result.starDiff
FROM movie m ,
(SELECT rat.mID, max(rat.stars) - min(rat.stars) as starDiff
FROM rating rat
GROUP BY mID) Result
WHERE m.mID = Result.mID
ORDER BY Result.starDiff DESC, m. title

-- Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980.)

SELECT avg(less1980.lessAvg) - avg(more1980. moreAVG) FROM (
SELECT avg(rat.stars) as lessAvg
FROM    movie mov join rating rat
ON mov.mID = rat.mID
AND mov.year < 1980
GROUP BY mov.mID) less1980,

(SELECT avg(rat.stars) as moreAVG
FROM  movie mov join rating rat
WHERE mov.mID = rat.mID
AND mov.year >= 1980
GROUP BY mov.mID) more1980

-- Find the names of all reviewers who rated Gone with the Wind.
SELECT DISTINCT rev.name 
FROM rating rat, movie mov, reviewer rev
WHERE rat.mID = mov.mID AND rat.rID = rev.rID
AND  mov.title =  'Gone with the Wind';

--For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.

SELECT DISTINCT rev.name, mov.title, rat.stars 
FROM rating rat, movie mov, reviewer rev
WHERE rat.mID = mov.mID AND rat.rID = rev.rID
 AND  mov.director = rev.name;

--Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".)
SELECT result . m FROM (
SELECT mov.title AS m
FROM movie mov
UNION
SELECT rev.name as m
FROM reviewer rev) result
ORDER BY result . m;

--Find the titles of all movies not reviewed by Chris Jackson.

SELECT mov.title FROM movie mov WHERE mov.mID NOT IN (
SELECT rat.mID
FROM rating rat 
WHERE rat.rID   in (SELECT rev.rID FROM reviewer rev WHERE rev.name = 'Chris Jackson'))

-- For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars.

SELECT rev.name, mov.title, rat.stars  
FROM rating rat, movie mov,reviewer rev
WHERE rat.rID = rev.rID AND rat.mID = mov.mID
AND rat.stars IN ( SELECT MIN(stars) FROM rating)


-- List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order.

SELECT mov.title, avg(rat.stars)
FROM rating rat, movie mov
WHERE rat.mId = mov.mID
GROUP BY mov.title
ORDER BY avg(rat.stars) desc, mov.title

-- Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.)
SELECT rev.name FROM
(SELECT DISTINCT rat1.rID
FROM  rating rat1
WHERE  (SELECT COUNT(*)  FROM rating rat2 
              WHERE rat2.mID <> rat1.mID AND rat2.rID = rat1.rID  ) >=2) result, reviewer rev
              WHERE result.rID = rev.rID;

--Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.)
SELECT mov1.title, mov1. director
FROM movie mov1
WHERE exists (SELECT *
                FROM movie mov2
                 WHERE mov2.director = mov1.director AND mov2.title <> mov1.title)
 ORDER BY  mov1. director ,mov1.title  ;
-- Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.)
SELECT mov.title , avg(rat.stars)
FROM movie mov, rating rat
WHERE mov.mID = rat.mID
GROUP BY mov.title
ORDER BY avg(rat.stars) DESC
LIMIT 1;

-- Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.)
SELECT * FROM movie mov, rating rat
WHERE mov.mID = rat.mID
GROUP BY mov.title
HAVING avg(rat.stars) = 

(SELECT  avg(rat.stars)
FROM movie mov, rating rat
WHERE mov.mID = rat.mID
GROUP BY mov.title
ORDER BY avg(rat.stars) 
LIMIT 1);

--For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.
SELECT DISTINCT result1.director,result1.title,result1.stars FROM 
(SELECT mov1.director,mov1.title,rat1.stars
FROM movie mov1, rating rat1
WHERE mov1.mID = rat1.mID AND mov1.director IS NOT NULL
)  result1 
WHERE NOT exists
 (SELECT * FROM 
(SELECT mov2.director,mov2.title,rat2.stars
FROM movie mov2, rating rat2
WHERE mov2.mID = rat2.mID AND mov2.director IS NOT NULL
 )  result2 WHERE result2.director = result1.director AND result2.stars > result1.stars)


